<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>花生 - Blog</title>
  
  <subtitle>一天进步两点</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://woshihuasheng.github.io/"/>
  <updated>2017-10-29T00:46:00.073Z</updated>
  <id>https://woshihuasheng.github.io/</id>
  
  <author>
    <name>花生</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CSS盒模型</title>
    <link href="https://woshihuasheng.github.io/2017/10/29/box/"/>
    <id>https://woshihuasheng.github.io/2017/10/29/box/</id>
    <published>2017-10-29T00:09:40.000Z</published>
    <updated>2017-10-29T00:46:00.073Z</updated>
    
    <content type="html"><![CDATA[<ul><li>清除浮动的原理 BFC JS获取宽高 IE模型 标准模型</li></ul><a id="more"></a><h4 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a>一、基本概念</h4><p><strong>IE模型：</strong>width/height 只包含content<br><strong>标准模型：</strong>width/height 包含content + padding + border</p><hr><ul><li>内联样式：<ol><li>行内的</li><li>写在html的style标签内的。</li></ol></li><li>外联样式：link引入的样式表。</li></ul><h4 id="二、JS如何设置盒模型对应的宽和高"><a href="#二、JS如何设置盒模型对应的宽和高" class="headerlink" title="二、JS如何设置盒模型对应的宽和高"></a>二、JS如何设置盒模型对应的宽和高</h4><ul><li>dom.style.width/height:             只能获取内联样式，不够准确。</li><li>dom.currentStyle.width/height：<br>浏览器渲染之后的样式，不管之前样式是怎么获取的，比较准确，但只有IE支持。</li><li>window.getComputedStyle(dom).width/height: 和上一个api原理相似，只不过可以兼容FireFox和chome。</li><li><strong>dom.getBoundingClientRect().width/height</strong>: 这个api也可以获取准确的属性值，可以获取相对视窗的绝对位置（左上角），有4个属性：<ol><li>top</li><li>left</li><li>width</li><li>height</li></ol></li></ul><h4 id="三、边距重叠问题"><a href="#三、边距重叠问题" class="headerlink" title="三、边距重叠问题"></a>三、边距重叠问题</h4><ol><li>取较大值</li><li>利用如下实例说明</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">//父级 height:100px; </div><div class="line">//子集 height：100px; 有 margin-top:10px;</div><div class="line">//且父级的背景色不显示</div><div class="line">&lt;section id=&quot;sec&quot;&gt; </div><div class="line">&lt;style&gt;</div><div class="line">#sec&#123;</div><div class="line">background: red;</div><div class="line">&#125;</div><div class="line">.child&#123;</div><div class="line">height:100px;</div><div class="line">margin-top:10px;</div><div class="line">background:yellow;</div><div class="line">&#125;</div><div class="line">&lt;/style&gt;</div><div class="line">&lt;article class=&quot;child&quot;&gt;&lt;/article&gt;</div><div class="line">&lt;/section&gt;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">//父级高度变为 110px；</div><div class="line">// BFC(边距重叠解决方案)</div><div class="line">&lt;section id=&quot;sec&quot;&gt; </div><div class="line">&lt;style&gt;</div><div class="line">#sec&#123;</div><div class="line">background: red;</div><div class="line">overflow: hidden; //增加该属性</div><div class="line">&#125;</div><div class="line">.child&#123;</div><div class="line">height:100px;</div><div class="line">margin-top:10px;</div><div class="line">background:yellow;</div><div class="line">&#125;</div><div class="line">&lt;/style&gt;</div><div class="line">&lt;article class=&quot;child&quot;&gt;&lt;/article&gt;</div><div class="line">&lt;/section&gt;</div></pre></td></tr></table></figure><ul><li><p>BFC的<strong>概念</strong>：</p><p>  块级元素格式化上下文(相应的-IFC-内联元素格式化上下文)</p></li><li>BFC的<strong>原理</strong>（渲染规则）<ol><li>在BFC这个元素的垂直方向的边距会产生重叠</li><li>BFC的区域不会与浮动元素的box重叠（用来清除浮动）</li><li>BFC在页面上是一个独立的容器，外面的元素不会影响它里面的元素，反之亦然</li><li>计算BFC高度时，浮动元素也会参与计算</li></ol></li><li>如何<strong>创建</strong>BFC<ol><li>float值不为none；</li><li>position的值不是static或relative；</li><li>display值为table、table-cell等和table有关的，block, list-item；</li><li>overflow值不为visible，即hidden、scroll、auto都可，inherit(从父元素继承 overflow属性的值,所以不确定，因为可能继承到visible)</li></ol></li><li>BFC的<strong>使用场景</strong>：<ol><li><strong>边距重叠</strong>：给元素添加一个父级，并给父级创建BFC。（测试发现直接对元素创建BFC不管用，还是需要父级）</li><li><strong>浮动元素重叠</strong>：2个浮动的元素，高度固定，当其中一块的内容超出，该元素会与另一浮动元素重叠，++对高度超出的元素创建BFC++，可解决该问题</li><li><strong>清除浮动</strong>：BFC子元素即使是float，也会参与高度计算。（例子：子元素浮动，高度为100px，在浏览器F12发现父级高度为0，原因是float脱离文档流，没有参与计算，当给父级创建BFC，BFC计算高度时，浮动元素也会参与计算，此时父级高度变为了100px；若子元素为文字，父级有背景色，在清除浮动后，父级的背景色才可见。这就是之前用overflow：hidden；清除浮动的原理）<blockquote><p>扩展</p></blockquote></li></ol></li><li><strong>float</strong>: left/right/none/inherit</li><li><strong>position</strong>: <ol><li>absolute: 绝对定位, 相对于 static 定位以外的第一个父元素进行定位。</li><li>fixed: 绝对定位, 相对于浏览器窗口进行定位。</li><li>relative: 相对定位, 相对于其正常位置进行定位。</li><li>static: 默认值。没有定位，元素出现在正常的流中。</li><li>inherit: 从父元素继承 position 属性的值。</li></ol></li><li><strong>overflow</strong>: <ol><li>visible: 默认值。内容不会被修剪，会呈现在元素框之外。</li><li>hidden: 内容会被修剪，并且其余内容是不可见的。</li><li>scroll: 内容会被修剪，但是浏览器会显示滚动条以便查看其余的内容。</li><li>auto: <strong>如果</strong>内容被修剪，则浏览器会显示滚动条以便查看其余的内容。</li><li>inherit: 从父元素继承 overflow 属性的值。</li></ol></li><li><strong>display</strong>: (表格为啥不行，无解。。。)<br>  | 值                | 描述                                                          |<br>  | —————– | :———————————————————–: |<br>  |none                |此元素不会被显示。                                             |<br>  |block                |此元素将显示为块级元素，此元素前后会带有换行符。               |<br>  |inline                |默认。此元素会被显示为内联元素，元素前后没有换行符。           |<br>  |inline-block       |行内块元素。（CSS2.1 新增的值）。                              |<br>  |list-item            |此元素会作为列表显示。                                         |<br>  |run-in                |此元素会根据上下文作为块级元素或内联元素显示。                 |<br>  |compact            |CSS中有值compact，不过由于缺乏广泛支持，已经从CSS2.1中删除。   |<br>  |marker                |CSS 中有值 marker，不过由于缺乏广泛支持，已经从 CSS2.1 中删除。|<br>  |table                |此元素会作为块级表格来显示（类似table），表格前后带有换行符。  |<br>  |inline-table        |此元素会作为内联表格来显示（类似table），表格前后没有换行符。  |<br>  |table-row-group    |此元素会作为一个或多个行的分组来显示（类似tbody）。            |<br>  |table-header-group |此元素会作为一个或多个行的分组来显示（类似thead）。            |<br>  |table-footer-group |此元素会作为一个或多个行的分组来显示（类似tfoot）。            |<br>  |table-row            |此元素会作为一个表格行显示（类似 tr）。                        |<br>  |table-column-group |此元素会作为一个或多个列的分组来显示（类似colgroup）。         |<br>  |table-column       |此元素会作为一个单元格列显示（类似 col）。                     |<br>  |table-cell            |此元素会作为一个表格单元格显示（类似 td 和 th）。              |<br>  |table-caption      |此元素会作为一个表格标题显示（类似 caption）。                 |<br>  |inherit            |规定应该从父元素继承 display 属性的值。                        |</li></ul><hr>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;清除浮动的原理 BFC JS获取宽高 IE模型 标准模型&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="学习整理" scheme="https://woshihuasheng.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%95%B4%E7%90%86/"/>
    
      <category term="css" scheme="https://woshihuasheng.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>5种css自适应布局-垂直</title>
    <link href="https://woshihuasheng.github.io/2017/10/26/CSS-vertical/"/>
    <id>https://woshihuasheng.github.io/2017/10/26/CSS-vertical/</id>
    <published>2017-10-26T12:33:12.000Z</published>
    <updated>2017-10-27T02:51:28.800Z</updated>
    
    <content type="html"><![CDATA[<ul><li>4种布局：绝对定位、flex、表格、网格 <a href="https://woshihuasheng.github.io/css-layout/layout-vertical" style="border: 1px solid #e8e8e8; border-radius:2px;" target="_blank">demo演示-调整浏览器高度见效果</a></li></ul><ul><li>网格布局兼容性差，测试发现chome、FireFox新版本兼容，360浏览器grid挂了。<a id="more"></a>垂直方向与水平方向在编写是略有不同，需要设<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">html, body, ...&#123; //省略号代表包含items的标签</div><div class="line">    height:100%;</div><div class="line">    width:... //宽度自设</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><p>和水平方向的相比，少了float，float布局能不能写垂直方向我不确定，目前不会写。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">&lt;title&gt;layout-vertical&lt;/title&gt;</div><div class="line">&lt;style type=&quot;text/css&quot;&gt;</div><div class="line">html *&#123;</div><div class="line">padding: 0;</div><div class="line">margin: 0;</div><div class="line">&#125;</div><div class="line">html, body, section,article&#123;</div><div class="line">height: 100%;</div><div class="line">width: 150px;</div><div class="line">&#125;</div><div class="line">section&#123;</div><div class="line">margin-left: 20px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">body&#123;</div><div class="line">display: flex;</div><div class="line">&#125;</div><div class="line">&lt;/style&gt;</div><div class="line">&lt;/head&gt;</div><div class="line"></div><div class="line">&lt;body&gt;</div><div class="line">&lt;section class=&quot;layout grid&quot;&gt;</div><div class="line">&lt;style&gt;</div><div class="line">.layout.grid .top-center-bottom&#123;</div><div class="line">display: grid;</div><div class="line">grid-template-rows: 100px auto 100px;</div><div class="line">grid-template-columns:100%;</div><div class="line">&#125;</div><div class="line">.layout.grid .top&#123;</div><div class="line">background: yellowgreen;</div><div class="line">&#125;</div><div class="line">.layout.grid .center&#123;</div><div class="line">background:lightskyblue;</div><div class="line">&#125;</div><div class="line">.layout.grid .bottom&#123;</div><div class="line">background: lightcoral;</div><div class="line">&#125;</div><div class="line">&lt;/style&gt;</div><div class="line">&lt;article class=&quot;top-center-bottom&quot;&gt;</div><div class="line">&lt;div class=&quot;top&quot;&gt;顶部&lt;/div&gt;</div><div class="line">&lt;div class=&quot;center&quot;&gt;网格布局&lt;/div&gt;</div><div class="line">&lt;div class=&quot;bottom&quot;&gt;底部100px&lt;/div&gt;</div><div class="line">&lt;/article&gt;</div><div class="line">&lt;/section&gt;</div><div class="line"></div><div class="line">&lt;section class=&quot;layout table&quot;&gt;</div><div class="line">&lt;style&gt;</div><div class="line">.layout.table .top-center-bottom&gt;div&#123;</div><div class="line">display: table-row;</div><div class="line">&#125;</div><div class="line">.layout.table .top&#123;</div><div class="line">height:100px;</div><div class="line">background: yellowgreen;</div><div class="line">&#125;</div><div class="line">.layout.table .center&#123;</div><div class="line">background:lightskyblue;</div><div class="line">&#125;</div><div class="line">.layout.table .bottom&#123;</div><div class="line">height:100px;</div><div class="line">background: lightcoral;</div><div class="line">&#125;</div><div class="line">.layout.table .top-center-bottom&#123;</div><div class="line">display: table;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&lt;/style&gt;</div><div class="line">&lt;article class=&quot;top-center-bottom&quot;&gt;</div><div class="line">&lt;div class=&quot;top&quot;&gt;顶部&lt;/div&gt;</div><div class="line">&lt;div class=&quot;center&quot;&gt;表格布局&lt;/div&gt;</div><div class="line">&lt;div class=&quot;bottom&quot;&gt;底部100px&lt;/div&gt;</div><div class="line">&lt;/article&gt;</div><div class="line">&lt;/section&gt;</div><div class="line"></div><div class="line">&lt;section class=&quot;layout flexbox&quot;&gt;</div><div class="line">&lt;style&gt;</div><div class="line">.layout.flexbox .top-center-bottom&#123;</div><div class="line">display: flex;</div><div class="line">box-orient:vertical;</div><div class="line">flex-direction: column;</div><div class="line">&#125;</div><div class="line">.layout.flexbox .top&#123;</div><div class="line">height:100px;</div><div class="line">background: yellowgreen;</div><div class="line">&#125;</div><div class="line">.layout.flexbox .center&#123;</div><div class="line">flex-grow: 1;</div><div class="line">background:lightskyblue;</div><div class="line">&#125;</div><div class="line">.layout.flexbox .bottom&#123;</div><div class="line">height:100px;</div><div class="line">background: lightcoral;</div><div class="line">&#125;</div><div class="line">&lt;/style&gt;</div><div class="line"></div><div class="line">&lt;article class=&quot;top-center-bottom&quot;&gt;</div><div class="line">&lt;div class=&quot;top&quot;&gt;顶部&lt;/div&gt;</div><div class="line">&lt;div class=&quot;center&quot;&gt;flexbox&lt;/div&gt;</div><div class="line">&lt;div class=&quot;bottom&quot;&gt;底部&lt;/div&gt;</div><div class="line">&lt;/article&gt;</div><div class="line">&lt;/section&gt;</div><div class="line"></div><div class="line">&lt;section class=&quot;layout absolute&quot;&gt;</div><div class="line">&lt;style&gt;</div><div class="line">.layout.absolute .top-center-bottom&gt;div&#123;</div><div class="line">position: absolute;</div><div class="line">width:150px;</div><div class="line">&#125;</div><div class="line">.layout.absolute .top&#123;</div><div class="line">height:100px;</div><div class="line">background: yellowgreen;</div><div class="line">top:0;</div><div class="line">&#125;</div><div class="line">.layout.absolute .center&#123;</div><div class="line">top:100px;</div><div class="line">bottom: 100px;</div><div class="line">background:lightskyblue;</div><div class="line">&#125;</div><div class="line">.layout.absolute .bottom&#123;</div><div class="line">height:100px;</div><div class="line">background: lightcoral;</div><div class="line">bottom: 0;</div><div class="line">&#125;</div><div class="line">&lt;/style&gt;</div><div class="line"></div><div class="line">&lt;article class=&quot;top-center-bottom&quot;&gt;</div><div class="line">&lt;div class=&quot;top&quot;&gt;顶部&lt;/div&gt;</div><div class="line">&lt;div class=&quot;center&quot;&gt;绝对定位&lt;/div&gt;</div><div class="line">&lt;div class=&quot;bottom&quot;&gt;底部&lt;/div&gt;</div><div class="line">&lt;/article&gt;</div><div class="line">&lt;/section&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;4种布局：绝对定位、flex、表格、网格 &lt;a href=&quot;https://woshihuasheng.github.io/css-layout/layout-vertical&quot; style=&quot;border: 1px solid #e8e8e8; border-radius:2px;&quot; target=&quot;_blank&quot;&gt;demo演示-调整浏览器高度见效果&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;网格布局兼容性差，测试发现chome、FireFox新版本兼容，360浏览器grid挂了。
    
    </summary>
    
    
      <category term="学习整理" scheme="https://woshihuasheng.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%95%B4%E7%90%86/"/>
    
      <category term="css" scheme="https://woshihuasheng.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>5种css自适应布局-水平</title>
    <link href="https://woshihuasheng.github.io/2017/10/26/CSS-horizontal/"/>
    <id>https://woshihuasheng.github.io/2017/10/26/CSS-horizontal/</id>
    <published>2017-10-26T12:32:56.000Z</published>
    <updated>2017-10-26T13:12:22.694Z</updated>
    
    <content type="html"><![CDATA[<ul><li>5种布局：float、绝对定位、flex、表格、网格  <a href="https://woshihuasheng.github.io/css-layout/layout" style="border: 1px solid #e8e8e8; border-radius:2px;" target="_blank">demo演示-调整浏览器宽度见效果</a></li></ul><a id="more"></a><p>除了常见的<strong>float布局</strong>、<strong>绝对定位布局</strong>、<strong>flex布局</strong>，还有<strong>表格布局</strong>、<strong>网格布局</strong>，各有所长，看情况使用。</p><ul><li>网格布局兼容性差，测试发现chome、FireFox新版本兼容，360浏览器grid挂了。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta charset=&quot;UTF-8&quot;/&gt;</div><div class="line">&lt;title&gt;Layout&lt;/title&gt;</div><div class="line">&lt;style type=&quot;text/css&quot;&gt;</div><div class="line">html *&#123;</div><div class="line">padding: 0;</div><div class="line">margin: 0;</div><div class="line">&#125;</div><div class="line">.layout&#123;</div><div class="line">margin-top: 20px;</div><div class="line">&#125;</div><div class="line">.layout article div&#123;</div><div class="line">min-height: 100px;</div><div class="line">&#125;</div><div class="line">&lt;/style&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;!--浮动-优点：兼容性高；缺点：浮动要清除，关系要处理好--&gt;</div><div class="line">&lt;section class=&quot;layout float&quot;&gt;</div><div class="line">&lt;style media=&quot;screen&quot;&gt;</div><div class="line">.layout.float .left&#123;</div><div class="line">float: left;</div><div class="line">width: 300px;</div><div class="line">background: red;</div><div class="line">&#125;</div><div class="line">.layout.float .right&#123;</div><div class="line">float: right;</div><div class="line">width: 300px;</div><div class="line">background: blue;</div><div class="line">&#125;</div><div class="line">.layout.float .center&#123;</div><div class="line">background: yellowgreen;</div><div class="line">&#125;</div><div class="line">&lt;/style&gt;</div><div class="line">&lt;article class=&quot;left-center-right&quot;&gt;</div><div class="line">&lt;div class=&quot;left&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;div class=&quot;right&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;div class=&quot;center&quot;&gt;</div><div class="line">&lt;h1&gt;浮动解决方案&lt;/h1&gt;</div><div class="line">1. 这是三栏布局中间部分</div><div class="line">2. 这是三栏布局中间部分</div><div class="line">&lt;p&gt;增加高度&lt;/p&gt;</div><div class="line">&lt;p&gt;增加高度&lt;/p&gt;</div><div class="line">&lt;p&gt;增加高度&lt;/p&gt;</div><div class="line">&lt;p&gt;增加高度&lt;/p&gt;</div><div class="line">&lt;p&gt;增加高度&lt;/p&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;/article&gt;</div><div class="line">&lt;/section&gt;</div><div class="line"></div><div class="line">&lt;!--绝对定位-优点：快捷；缺点：脱离文档流了，之后的元素也要脱离文档流，可使用性差--&gt;</div><div class="line">&lt;section class=&quot;layout absolute&quot;&gt;</div><div class="line">&lt;style type=&quot;text/css&quot;&gt;</div><div class="line">.layout.absolute .left-center-right&gt;div&#123;</div><div class="line">position: absolute;</div><div class="line">&#125;</div><div class="line">.layout.absolute .left&#123;</div><div class="line">left: 0;</div><div class="line">width: 300px;</div><div class="line">background: red;</div><div class="line">&#125;</div><div class="line">.layout.absolute .right&#123;</div><div class="line">right: 0;</div><div class="line">width: 300px;</div><div class="line">background: blue;</div><div class="line">&#125;</div><div class="line">.layout.absolute .center&#123;</div><div class="line">right: 300px;</div><div class="line">left: 300px;</div><div class="line">background: green;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&lt;/style&gt;</div><div class="line">&lt;article class=&quot;left-center-right&quot;&gt;</div><div class="line">&lt;div class=&quot;left&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;div class=&quot;right&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;div class=&quot;center&quot;&gt;</div><div class="line">&lt;h2&gt;绝对定位解决方案&lt;/h2&gt;</div><div class="line">1. 这是三栏布局中间部分</div><div class="line">2. 这是三栏布局中间部分</div><div class="line">&lt;p&gt;增加高度&lt;/p&gt;</div><div class="line">&lt;p&gt;增加高度&lt;/p&gt;</div><div class="line">&lt;p&gt;增加高度&lt;/p&gt;</div><div class="line">&lt;p&gt;增加高度&lt;/p&gt;</div><div class="line">&lt;p&gt;增加高度&lt;/p&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;/article&gt;</div><div class="line">&lt;/section&gt;</div><div class="line"></div><div class="line">&lt;!--flex-css3出现，移动端，比较完美，不兼容IE8--&gt;</div><div class="line">&lt;section class=&quot;layout flexbox&quot;&gt;</div><div class="line">&lt;style&gt;</div><div class="line">.layout.flexbox&#123;</div><div class="line">margin-top: 150px;</div><div class="line">&#125;</div><div class="line">.layout.flexbox .left-center-right&#123;</div><div class="line">display: flex;</div><div class="line">&#125;</div><div class="line">.layout.flexbox .left&#123;</div><div class="line">width:300px;</div><div class="line">background:red;</div><div class="line">&#125;</div><div class="line">.layout.flexbox .center&#123;</div><div class="line">flex:1;</div><div class="line">background: green;</div><div class="line">&#125;</div><div class="line">.layout.flexbox .right&#123;</div><div class="line">width:300px;</div><div class="line">background:yellow;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&lt;/style&gt;</div><div class="line">&lt;article class=&quot;left-center-right&quot;&gt;</div><div class="line">&lt;div class=&quot;left&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;div class=&quot;center&quot;&gt;</div><div class="line">&lt;h1&gt;flexbox解决方案&lt;/h1&gt;</div><div class="line">1. 这是三栏布局中间部分</div><div class="line">2. 这是三栏布局中间部分</div><div class="line">&lt;p&gt;增加高度&lt;/p&gt;</div><div class="line">&lt;p&gt;增加高度&lt;/p&gt;</div><div class="line">&lt;p&gt;增加高度&lt;/p&gt;</div><div class="line">&lt;p&gt;增加高度&lt;/p&gt;</div><div class="line">&lt;p&gt;增加高度&lt;/p&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div class=&quot;right&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;/article&gt;</div><div class="line">&lt;/section&gt;</div><div class="line"></div><div class="line">&lt;!--表格-优点：兼容性好，缺点：三栏，其中一个单元格高度超出，别的单元格也会调整--&gt;</div><div class="line">&lt;section class=&quot;layout table&quot;&gt;</div><div class="line">&lt;style type=&quot;text/css&quot;&gt;</div><div class="line">.layout.table .left-center-right&#123;</div><div class="line">width: 100%;</div><div class="line">display: table;</div><div class="line">height: 100px;</div><div class="line">&#125;</div><div class="line">.layout.table .left-center-right&gt;div&#123;</div><div class="line">display: table-cell;</div><div class="line">&#125;</div><div class="line">.layout.table .left&#123;</div><div class="line">width:300px;</div><div class="line">background:red;</div><div class="line">&#125;</div><div class="line">.layout.table .center&#123;</div><div class="line">background: green;</div><div class="line">&#125;</div><div class="line">.layout.table .right&#123;</div><div class="line">width:300px;</div><div class="line">background:blue;</div><div class="line">&#125;</div><div class="line">&lt;/style&gt;</div><div class="line">&lt;article class=&quot;left-center-right&quot;&gt;</div><div class="line">&lt;div class=&quot;left&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;div class=&quot;center&quot;&gt;</div><div class="line">&lt;h1&gt;表格布局&lt;/h1&gt;</div><div class="line">1. 这是三栏布局中间部分</div><div class="line">2. 这是三栏布局中间部分</div><div class="line">&lt;p&gt;增加高度&lt;/p&gt;</div><div class="line">&lt;p&gt;增加高度&lt;/p&gt;</div><div class="line">&lt;p&gt;增加高度&lt;/p&gt;</div><div class="line">&lt;p&gt;增加高度&lt;/p&gt;</div><div class="line">&lt;p&gt;增加高度&lt;/p&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div class=&quot;right&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;/article&gt;</div><div class="line">&lt;/section&gt;</div><div class="line"></div><div class="line">&lt;!--网格-新技术-优点：代码量少，缺点：只兼容ie11+--&gt;</div><div class="line">&lt;section class=&quot;layout grid&quot;&gt;</div><div class="line">&lt;style type=&quot;text/css&quot;&gt;</div><div class="line">.layout.grid .left-center-right&#123;</div><div class="line">display: grid;</div><div class="line">width:100%;</div><div class="line">grid-template-rows: 100px;</div><div class="line">grid-template-columns:300px auto 300px;</div><div class="line">&#125;</div><div class="line">.layout.grid .left&#123;</div><div class="line">background:red;</div><div class="line">&#125;</div><div class="line">.layout.grid .center&#123;</div><div class="line">background: green;</div><div class="line">&#125;</div><div class="line">.layout.grid .right&#123;</div><div class="line">background:blue;</div><div class="line">&#125;</div><div class="line">&lt;/style&gt;</div><div class="line">&lt;article class=&quot;left-center-right&quot;&gt;</div><div class="line">&lt;div class=&quot;left&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;div class=&quot;center&quot;&gt;</div><div class="line">&lt;h1&gt;网格布局&lt;/h1&gt;</div><div class="line">1. 这是三栏布局中间部分</div><div class="line">2. 这是三栏布局中间部分</div><div class="line">&lt;p&gt;增加高度&lt;/p&gt;</div><div class="line">&lt;p&gt;增加高度&lt;/p&gt;</div><div class="line">&lt;p&gt;增加高度&lt;/p&gt;</div><div class="line">&lt;p&gt;增加高度&lt;/p&gt;</div><div class="line">&lt;p&gt;增加高度&lt;/p&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div class=&quot;right&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;/article&gt;</div><div class="line">&lt;/section&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;5种布局：float、绝对定位、flex、表格、网格  &lt;a href=&quot;https://woshihuasheng.github.io/css-layout/layout&quot; style=&quot;border: 1px solid #e8e8e8; border-radius:2px;&quot; target=&quot;_blank&quot;&gt;demo演示-调整浏览器宽度见效果&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="学习整理" scheme="https://woshihuasheng.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%95%B4%E7%90%86/"/>
    
      <category term="css" scheme="https://woshihuasheng.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>js整理4</title>
    <link href="https://woshihuasheng.github.io/2017/08/20/js%E6%95%B4%E7%90%864/"/>
    <id>https://woshihuasheng.github.io/2017/08/20/js整理4/</id>
    <published>2017-08-19T16:00:00.000Z</published>
    <updated>2017-10-24T14:34:58.874Z</updated>
    
    <content type="html"><![CDATA[<ul><li>date, 获取系统时间</li></ul><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&lt;span id=&quot;time&quot;&gt;&lt;/span&gt;</div><div class="line">&lt;script&gt;</div><div class="line">var Time=document.getElementById(&quot;time&quot;);</div><div class="line">var Day=[&quot;日&quot;,&quot;一&quot;,&quot;二&quot;,&quot;三&quot;,&quot;四&quot;,&quot;五&quot;,&quot;六&quot;]</div><div class="line">function time()&#123;</div><div class="line">var date = new Date();</div><div class="line">var dateFullYear = date.getFullYear();</div><div class="line">var dateMonth = date.getMonth()+1;</div><div class="line">var dateDate = date.getDate();</div><div class="line">var dateDay = date.getDay();</div><div class="line">var dateHours = date.getHours();</div><div class="line">var dateMinutes = date.getMinutes();</div><div class="line">var dateSeconds = date.getSeconds();</div><div class="line">var str = &quot;&quot;+dateFullYear+&quot;年&quot;+dateMonth+&quot;月&quot;+dateDate+&quot;日&quot;+&quot;星期&quot;+Day[dateDay]+num(dateHours)+&quot;:&quot;+num(dateMinutes)+&quot;:&quot;+num(dateSeconds);</div><div class="line">Time.innerHTML=str;</div><div class="line">&#125;</div><div class="line">time()</div><div class="line">setInterval(time,1000);</div><div class="line">function num(obj)&#123;</div><div class="line">if(obj&lt;10)&#123;</div><div class="line">obj = &quot;0&quot;+obj;</div><div class="line">return obj;</div><div class="line">&#125;</div><div class="line">else&#123;</div><div class="line">return obj;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;date, 获取系统时间&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://woshihuasheng.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>js整理3</title>
    <link href="https://woshihuasheng.github.io/2017/08/17/js%E6%95%B4%E7%90%863/"/>
    <id>https://woshihuasheng.github.io/2017/08/17/js整理3/</id>
    <published>2017-08-16T16:00:00.000Z</published>
    <updated>2017-10-24T14:31:25.715Z</updated>
    
    <content type="html"><![CDATA[<ul><li>作用域、闭包、ajax</li></ul><a id="more"></a><h3 id="一、作用域"><a href="#一、作用域" class="headerlink" title="一、作用域"></a>一、作用域</h3><ol><li>函数声明、变量定义会提前（全局）</li></ol><ul><li>变量定义为undefined</li><li>函数声明和函数调用顺序调换仍正常运行</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//var a = undefined</div><div class="line">console.log(a) // undefined</div><div class="line">var a = 100</div><div class="line">console.log(a) // 100</div></pre></td></tr></table></figure><ol><li>循环中i的调用出错，用this.index的原因</li></ol><ul><li>i的定义在之前，在循环中要调用i时，等程序执行到此处，i值已变<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">方法二</div><div class="line">var i</div><div class="line">for(i = 0; i &lt; 10; i++)&#123;</div><div class="line">    (function(i)&#123;</div><div class="line">        ...</div><div class="line">        alert(i)</div><div class="line">        &#125;)</div><div class="line">        ...</div><div class="line">    &#125;)(i)</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h3 id="二、闭包"><a href="#二、闭包" class="headerlink" title="二、闭包"></a>二、闭包</h3><ul><li>实际开发中的作用</li></ul><ol><li>封装函数</li><li>收敛权限</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">//1创建ajax对象</div><div class="line">if(window.XMLHttpRequest)&#123;</div><div class="line">var xhr = new XMLHttpRequest;</div><div class="line">&#125;else&#123;</div><div class="line">var xhr = new ActiveXObject(&apos;Microsoft.XMLHTTP&apos;);//兼容IE6以下版本的浏览器</div><div class="line">&#125;;</div><div class="line">//2链接 open()接受三个参数 请求方式 请求地址 是否是异步（同步几乎不用）</div><div class="line">//get是把请求的数据放到地址栏上 </div><div class="line">//post是把数据放到send上</div><div class="line">xhr.open(&apos;get&apos;,&apos;http://www.survey.com/ajax/test.txt&apos;);</div><div class="line"></div><div class="line">//3发送</div><div class="line">xhr.send();</div><div class="line"></div><div class="line">//4接收</div><div class="line">xhr.onreadystatechange=function()&#123;</div><div class="line">if(xhr.readyState==4)&#123;//XHR对象的readyState属性表示请求/响应过程的当前活动阶段</div><div class="line">//1-启动，调用了open()方法，未调用send()方法；</div><div class="line">//2-发送，已经调用了send()方法，未接收到响应；</div><div class="line">//3-接收，已经接收到部分响应数据；</div><div class="line">//4-完成，已经接收到全部响应数据；</div><div class="line">//readyState的值发生变化就会调用onreadystatechange 事件</div><div class="line">if(xhr.status==200)&#123;</div><div class="line">//status是状态码 200是成功 404是错误</div><div class="line">alert(xhr.responseText)//responseText：响应返回的主体内容，为字符串类型</div><div class="line">//responseXML</div><div class="line">&#125;else&#123;</div><div class="line">alert(&apos;错误&apos;+xhr.status)</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><p>封装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">function ajax(url,fnSCu,fnEr)&#123;</div><div class="line">//1 创建Ajax对象</div><div class="line">var xhr = new XMLHttpRequest;</div><div class="line">//open(&apos;请求方式&apos;,&apos;地址&apos;,&apos;是否是异步&apos;)</div><div class="line">//2链接服务器</div><div class="line">xhr.open(&apos;get&apos;,url,true);</div><div class="line">//3发送</div><div class="line">xhr.send();</div><div class="line">//4当客户端跟服务端有交互的时候</div><div class="line">xhr.onreadystatechange=function()&#123;</div><div class="line">if(xhr.readyState==4)&#123;</div><div class="line">if(xhr.status==200)&#123;</div><div class="line">fnSCu(xhr.responseText)</div><div class="line">&#125;else&#123;</div><div class="line">if(fnEr)&#123;</div><div class="line">fnEr(&apos;错误，代码&apos;+xhr.status)</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">function Ajax(url,fnSucc,fnEr)&#123;</div><div class="line">var xhr = new XMLHttpRequest;</div><div class="line">xhr.open(&apos;get&apos;,url,true);</div><div class="line">xhr.send();</div><div class="line"></div><div class="line">xhr.onreadystatechange=function()&#123;</div><div class="line">if(xhr.readyState==4)&#123;</div><div class="line">if(xhr.status==200)&#123;</div><div class="line">fnSucc(xhr.responseText)</div><div class="line">&#125;else&#123;</div><div class="line">if(fnEr)&#123;</div><div class="line">fnEr(&apos;请求错误，错误编号&apos;+xhr.status)</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">&#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>未完</p><p>革命尚未成功，我仍需努力……</p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;作用域、闭包、ajax&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://woshihuasheng.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>js整理2</title>
    <link href="https://woshihuasheng.github.io/2017/08/16/js%E6%95%B4%E7%90%862/"/>
    <id>https://woshihuasheng.github.io/2017/08/16/js整理2/</id>
    <published>2017-08-15T16:00:00.000Z</published>
    <updated>2017-10-24T13:40:00.158Z</updated>
    
    <content type="html"><![CDATA[<ul><li>变量类型、原型、原型链、构造函数、类型判断</li></ul><a id="more"></a><h3 id="一、5条原型规则："><a href="#一、5条原型规则：" class="headerlink" title="一、5条原型规则："></a>一、5条原型规则：</h3><p>1.所有的引用类型（数组、对象、函数），都具有对象特性，即可自由扩展属性（除了“null”意外）</p><p>2.所有的引用类型（数组、对象、函数），都有一个<em>proto</em>（隐式原型）属性，属性值是一个普通对象</p><p>3.所有的函数，都有一个prototype（显式原型）属性，属性值也是一个普通对象</p><p>4.所有的引用类型（数组、对象、函数），<em>proto</em>属性值指向它的构造函数的“prototype”属性值</p><p>5.当试图去得到一个对象的某个属性时，如果这个对象本身没有这个属性，那么会去它的<em>proto</em>(即它的构造函数的prototype)中寻找。</p><p><strong>扩展1</strong>：</p><ul><li>hasOwnProperty() 看是不是对象自身下面的属性</li><li>constructor：查看对象的构造函数</li><li>每个原型都会自动添加constructor属性</li></ul><p><strong>扩展2</strong>：循环对象自身的属性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">for(var item in f)&#123;</div><div class="line">    // 高级浏览器已经在 for in 中屏蔽了来自原型的属性</div><div class="line">    // 但加上判断，保证程序的健壮性</div><div class="line">    if(f.hasOwnProperty(item))&#123;</div><div class="line">        console.log(item)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>扩展3</strong>：原型链<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">f.toString()  // 要去 f._proto_._proto_ 中查找</div></pre></td></tr></table></figure></p><h3 id="二、new-一个对象的过程："><a href="#二、new-一个对象的过程：" class="headerlink" title="二、new 一个对象的过程："></a>二、new 一个对象的过程：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">function Foo(name,age) &#123;</div><div class="line">    this.name = name</div><div class="line">    this.age = age</div><div class="line">    //return this  //默认有这一行</div><div class="line">&#125;</div><div class="line">var f = new Foo(&quot;zhangsan&quot;, 10)</div></pre></td></tr></table></figure><p>因为构造函数中，默认有return this这一句，所以</p><ol><li>创建一个新对象</li><li>this指向这个新对象</li><li>执行代码，即对this赋值</li><li>返回this</li></ol><h3 id="三、构造函数-扩展"><a href="#三、构造函数-扩展" class="headerlink" title="三、构造函数-扩展"></a>三、构造函数-扩展</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var a = &#123;&#125; 为 var a = new Object() 的语法糖</div><div class="line">var a = [] 为 var a = new Array() 的语法糖</div><div class="line">function Foo()&#123;...&#125; 为 var Foo = new Function() 的语法糖</div><div class="line">使用 instanceof 判断一个函数是否是一个变量的构造函数</div></pre></td></tr></table></figure><p>判断一个变量是否是”数组”:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">变量 instanceof Array</div></pre></td></tr></table></figure></p><h3 id="四、包装对象"><a href="#四、包装对象" class="headerlink" title="四、包装对象"></a>四、包装对象</h3><p>基本类型调用方法的时候，会去找自己对应的包装对象，然后包装对象把属性和方法都给了基本类型后，包装对象就会消失掉；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var str=&apos;asdasd&apos;;</div><div class="line">alert(str.substring(0,3));  // 实际上 str.substring(0,3) ==&gt; new String(&apos;asdasd&apos;).substring(0,3)</div></pre></td></tr></table></figure></p><h3 id="五、变量类型"><a href="#五、变量类型" class="headerlink" title="五、变量类型"></a>五、变量类型</h3><p><strong>按储存方式区分</strong></p><ol><li>值类型（number、string、boolean）：每个变量一个地址</li><li>引用类型（对象、数组、函数）：变量内存地址通过指针指向对象，无限制添加属性</li></ol><p>小结<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">因为引用类型可以无限制添加属性，所以数据实际上只有1份，只是变量都指向该对象</div><div class="line">var a = &#123;num:50&#125;</div><div class="line">var b = a</div><div class="line">b.num = 20</div><div class="line">console.log(a.num)  // 20</div><div class="line"></div><div class="line">若为值类型，不改变</div></pre></td></tr></table></figure></p><p><strong>typeof运算符</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">typeof undefined  // undefined</div><div class="line">typeof &quot;abcd&quot;  // string</div><div class="line">typeof 123  // number</div><div class="line">typeof true  // boolean</div><div class="line">typeof &#123;&#125;  // object</div><div class="line">typeof []  // object</div><div class="line">typeof null  // object</div><div class="line">typeof console.log  // function</div></pre></td></tr></table></figure></p><p>共6种结果，只能对<strong>值类型</strong>有详细区分，引用类型中只能区别<strong>函数</strong></p><p><strong>由上引申</strong>：类型判断的方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">typeof  //只能区分值类型、函数，别的为 object</div><div class="line">obj.constructor==typeStyle</div><div class="line">instanceof  // 判断 引用类型 属于哪个 构造函数 的方法</div><div class="line">Object.prototype.toString.call(obj)  // 最严谨 </div><div class="line"></div><div class="line">var arr = [];</div><div class="line">console.log(Object.prototype.toString.call(arr)==&quot;[object Array]&quot;) //true</div></pre></td></tr></table></figure></p><h3 id="六、何时使用-与-涉及强制类型转换"><a href="#六、何时使用-与-涉及强制类型转换" class="headerlink" title="六、何时使用 == 与 ===  (涉及强制类型转换)"></a>六、何时使用 == 与 ===  (涉及强制类型转换)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">if(obj.a == null)&#123; // 只有这种情况用 ==，别的都用 ===</div><div class="line">    // 相当于 obj.a === null || obj.a === undefined , 简写形式</div><div class="line">    // jquery源码中推荐的写法</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="七、JS中的内置函数"><a href="#七、JS中的内置函数" class="headerlink" title="七、JS中的内置函数"></a>七、JS中的内置函数</h3><ul><li>Object</li><li>Array</li><li>Boolean</li><li>Number</li><li>String</li><li>Function</li><li>Date</li><li>RegExp</li><li>Error</li></ul><p>革命尚未成功，我仍需努力……</p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;变量类型、原型、原型链、构造函数、类型判断&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://woshihuasheng.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>js整理</title>
    <link href="https://woshihuasheng.github.io/2017/08/10/js%E6%95%B4%E7%90%86/"/>
    <id>https://woshihuasheng.github.io/2017/08/10/js整理/</id>
    <published>2017-08-09T16:00:00.000Z</published>
    <updated>2017-10-24T13:21:29.565Z</updated>
    
    <content type="html"><![CDATA[<ul><li>js简单梳理<a id="more"></a><h3 id="一、js事件分类"><a href="#一、js事件分类" class="headerlink" title="一、js事件分类"></a>一、js事件分类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ondblclick （鼠标双击事件）onmousewheel（鼠标滚轮事件）</div><div class="line">oncontextmenu（鼠标右键） onkeydown   (键盘按下事件)</div><div class="line">   onkeyup     (键盘抬起事件)</div><div class="line">   表单事件  （获取焦点onfocus，离开焦点onblur，文本内容改变onchange)</div><div class="line">自定义事件</div></pre></td></tr></table></figure></li></ul><p><strong>event 对象</strong> (用来获取事件的详细新信息)：鼠标位置、键盘按键</p><p><strong>键盘事件 :</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">- onkeydown</div><div class="line">- onkeyup</div><div class="line">- keyCode</div><div class="line"></div><div class="line">ev.keyCode获取键值 //上 38  下40 左 37 右39</div><div class="line">ctrlKey  shiftKey  altKey   //ev.shiftKey 会返回true；</div></pre></td></tr></table></figure></p><p><strong>事件冒泡</strong>            从里向外一层层冒泡，如果有相应事件则执行</p><p><strong>阻止事件冒泡</strong>        ev.cancelBubble=true;</p><p><strong>焦点事件</strong></p><p>浏览器区分用户输入对象，当一个元素有焦点的时候，它就可以接受用户输入 去进行交互</p><p>触发焦点事件的方法  1. tab 2. 点击  3. js</p><p><strong>全选文字</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">obj.select()   复制链接、搜索框中会用到</div></pre></td></tr></table></figure><p>document在外层, 不要window.onload也是没问题的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">document.onclick=function()&#123;</div><div class="line">    alert(1);</div><div class="line">&#125;</div><div class="line">```</div><div class="line"></div><div class="line"></div><div class="line">**默认行为:**</div><div class="line">浏览器自身具备的行为 比如右键弹出菜单 </div><div class="line"></div><div class="line"></div><div class="line">submit 自动提交表单...</div><div class="line">oncontextmenu();//鼠标右键默认菜单事件</div></pre></td></tr></table></figure><p><strong>阻止默认行为</strong>    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">return false；//解决拖拽过快的浏览器bug</div></pre></td></tr></table></figure><p><strong>自定义右键菜单</strong>    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">obj.oncontextmenu = function()&#123;...&#125;</div></pre></td></tr></table></figure><p><strong>onmousemove:</strong>    </p><p>以时间间隔触发，在一个指定的时间内（很短） 如果鼠标的位置跟上一次位置发生了变化 那 么就会触发一次</p><p><strong>点击元素变为textarea:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">contenteditable=&quot;true&quot;//聊天窗口可用到</div><div class="line">&lt;div id=&quot;box&quot; contenteditable=&quot;true&quot;&gt;1111&lt;/div&gt;</div></pre></td></tr></table></figure></p><h3 id="二、window"><a href="#二、window" class="headerlink" title="二、window"></a>二、window</h3><p><strong>2.1window 尺寸</strong></p><p>三种方法（浏览器的视口，不包括工具栏和滚动条）</p><p>实用的 JavaScript 方案（涵盖所有浏览器）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var w=window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;</div><div class="line">//对于IE、Chrome、Firefox、Opera 以及 Safari(window.innerWidth)</div><div class="line">//IE8.7.6.5(document.documentElement.clientWidth)</div><div class="line"></div><div class="line">var h=window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;</div></pre></td></tr></table></figure></p><p><strong>2.2其他 Window 方法</strong></p><p>一些其他方法：</p><ul><li>window.onload() - 加载完再执行</li><li>window.open() - 打开新窗口</li><li>window.close() - 关闭当前窗口</li><li>window.moveTo() - 移动当前窗口</li><li>window.resizeTo() - 调整当前窗口的尺寸</li></ul><h3 id="三、清除浮动"><a href="#三、清除浮动" class="headerlink" title="三、清除浮动"></a>三、清除浮动</h3><pre><code>3.1子元素有浮动的情况下 父级设置宽、高会清除浮动3.2子元素有浮动的情况下 父级设置overflow:hidden;3.3子元素有浮动的情况下 父级设置class类 .clear</code></pre><h3 id="四、隐藏"><a href="#四、隐藏" class="headerlink" title="四、隐藏"></a>四、隐藏</h3><pre><code>visibility:hidden;      可获取宽高display:none;           不可获取宽高</code></pre><h3 id="五、"><a href="#五、" class="headerlink" title="五、"></a>五、</h3><ul><li><strong>保留字</strong> class 目前它还不是关键字，但是以后有可能成为关键字 </li><li><strong>关键字</strong> JS里占用的就是关键字 我们不能用它来命名</li></ul><h3 id="六、获取内容"><a href="#六、获取内容" class="headerlink" title="六、获取内容"></a>六、获取内容</h3><ul><li>oCont.<strong>innerHTML</strong> 它获取的是文本加节点</li><li>oCont.<strong>innerText</strong> 它只能获取纯文本内容</li></ul><p>只能获取行间样式    oBox.<strong>style</strong>.width  带有px</p><p><strong>获取非行间样式</strong>（PS:也能获取行间样式）  去了px<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">offsetWidth 包含了边框+padding </div><div class="line">offsetHeight </div><div class="line">offsetLeft 包含了marging； 有bug的 后期会讲</div><div class="line">offsetTop</div><div class="line">```</div><div class="line">**获取具有定位属性的父元素** </div><div class="line">offsetParent </div><div class="line"></div><div class="line">**获取元素的宽度**</div><div class="line"></div><div class="line">clientWidth   包含padding 但是不包含border</div><div class="line"></div><div class="line">clientHeight</div></pre></td></tr></table></figure></p><h3 id="七、定时器"><a href="#七、定时器" class="headerlink" title="七、定时器"></a>七、定时器</h3><p><strong>间隔型定时器</strong>        setInterval  /  clearInterval</p><p><strong>延迟定时器</strong>            setTimeout  /  clearTimeout    </p><h3 id="八、引号加‘-’转义"><a href="#八、引号加‘-’转义" class="headerlink" title="八、引号加‘\’转义"></a>八、引号加‘\’转义</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">obj.innerHTML = &quot;&lt;img src=\&quot;img/&quot;+arr[this.index]+&quot;\&quot;/&gt;&quot;;</div><div class="line">//单引号性能高一些，可忽略</div></pre></td></tr></table></figure><h3 id="九、跳出循环"><a href="#九、跳出循环" class="headerlink" title="九、跳出循环"></a>九、跳出循环</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">break//跳出整个循环</div><div class="line">continue //跳出一次循环</div></pre></td></tr></table></figure><h3 id="十、for-in-循环"><a href="#十、for-in-循环" class="headerlink" title="十、for in 循环"></a>十、for in 循环</h3><p><strong>10.1json</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var data=&#123;&apos;name&apos;:&apos;张三&apos;,&apos;age&apos;:29,&apos;pass&apos;:&apos;1234&apos;&#125;;</div><div class="line">for( var arr in data)&#123;</div><div class="line">alert(arr+&apos;--&apos;+data[arr]);</div><div class="line">&#125;</div><div class="line">```</div><div class="line">**10.2数组**</div></pre></td></tr></table></figure></p><p>var arr=[1,2,2,3,4,5,5];<br>    for(var i in arr){<br>        alert(i+’–’+arr[i]);<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 十一、类型转换</div><div class="line">- parseInt()</div><div class="line">- parseFloat()</div><div class="line">- parseFloat().toFixed() 保留小数位</div><div class="line"></div><div class="line">**类型转换的方式**：</div><div class="line">1. 显式类型转换</div></pre></td></tr></table></figure></p><p>parseInt()     // 把数字型的字符串转换成数字<br>parseFloat()     // 浮点数 保留小数 价格计算<br>Number()        // 把计算的结果转成数字<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">2. 隐式类型转换</div></pre></td></tr></table></figure></p><ul><li><ul><li>/   %<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">十二、判断是否为非数字值</div><div class="line"></div><div class="line">isNaN()不是数字：返回true；  数字：返回false；</div><div class="line"></div><div class="line">十三、闭包</div><div class="line"></div><div class="line">里面的函数能访问外面的变量、外面的不能访问里面的</div><div class="line"></div><div class="line">十四、真假</div><div class="line"></div><div class="line">- 假：空字符串是假 数字0是假 undefined null false</div><div class="line"></div><div class="line">- 真：非空字符串 非0数字 非空对象null true </div><div class="line"></div><div class="line">十五、逻辑或 ||</div><div class="line"></div><div class="line">在2个都为真时，返回第一个值</div><div class="line"></div><div class="line">十六、arguments.length </div><div class="line"></div><div class="line">获取的是 *实际*  的参数 长度</div><div class="line"></div><div class="line">十七、offset的bug，border会算进长度里</div><div class="line"></div><div class="line">十八、能获取行间与非行间样式</div></pre></td></tr></table></figure></li></ul></li></ul><p>function getCss(obj,arr){<br>    if(obj.currentStyle){<br>        return     obj.currentStyle[arr]; //获取计算后的属性，IE<br>    }else{<br>        //获取计算后的属性,google和firefox<br>        return getComputedStyle(obj,null)[arr];<br>    }<br>};<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">### 十九、 数组</div><div class="line"></div><div class="line">19.1创建数组的两种方式1. new Array();2. arr=[](性能高点 常用)</div><div class="line"></div><div class="line">19.2清空数组1. arr.length=0;2. arr=&apos;&apos;;</div><div class="line"></div><div class="line">**19.3增、删、反转**</div><div class="line"></div><div class="line">- 从数组尾部添加push() </div><div class="line">- 从数组的头部添加unshift() </div><div class="line">- 从数组的头部删除 *返回值*是删除的项shift() </div><div class="line">- 从数组的尾部删除 *返回值*是删除的项pop() </div><div class="line">- 数组的反转reverse() </div><div class="line"></div><div class="line">**数组的增删改**splice(起始位置,删除/替换个数,替换/增加内容); </div><div class="line"></div><div class="line">&gt; 第一个参数是要开始的位置, 第二个参数是要替换的个数, 第三个参数是要替换的内容</div><div class="line"></div><div class="line">- 替换：起始位置,  替换个数, 替换内容；</div><div class="line">- 添加：起始位置,  第2个参数为0,  添加的内容；</div><div class="line">- 删除：起始位置,  删除个数；</div><div class="line"></div><div class="line">**19.4数组的排序**</div></pre></td></tr></table></figure></p><p>arr.sort(sortby) 默认<em>排序是按</em>字母位*进行排序<br>            //参数：sortby    （可选。规定排序顺序。必须是函数。如下）<br>比较函数：<br>function num(a,b){<br>    return a-b; //正序      b-a倒序<br>}<br>arr.sort(num);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">**19.5数组的合并**</div></pre></td></tr></table></figure></p><ol><li>concat(); // 也可连接字符串  不改变被连接的数组</li><li><p>apply(); // 会改变arr<br>var arr=[1,2,3];<br> var arr1=[4,5,6];<br> var arr2=[7,8,9];<br> var res1 = arr.concat(arr1,arr2);// 需要重新声明一个变量来储存<br>arr.push.apply(arr,[arr1,arr2]);</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">**19.6数组-&gt;字符串**</div></pre></td></tr></table></figure></li><li><p>arr.join(‘’) // 如果设置参数就是分隔符 不设置的话 默认没有分割符号</p></li><li><p>arr.toString()   // 没有分隔符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">**二十、Math.**</div></pre></td></tr></table></figure></li></ol><p>向下取整        Math.floor()        //只针对数字做处理<br>向上取整        Math.ceil()        //只针对数字做处理<br>随机数         Math.random()        //0~1的小数<br>四舍五入        Math.round()<br>取绝对值        Math.abs()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 二十一、时间运算公式</div></pre></td></tr></table></figure></p><p>天 Math.floor(t/86400) 1天 = 24<em>60</em>60<br>时 Math.floor(t%86400/3600) 1小时=60分 1分=60秒<br>分 Math.floor(t%86400%3600/60)<br>秒 t%60<br>var oDate = new Date();<br>oDate.setDate(oDate.getDate()+2);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">### 二十二、字符串</div><div class="line"></div><div class="line">22.1字符串-&gt;数组</div></pre></td></tr></table></figure></p><ul><li>split()<br>var str=’ada|sdas|dada’;<br>str.split(“|”)[‘ada’,’sdas’,’dada’]*/ (凭|分割)<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">22.2字符串的长度</div></pre></td></tr></table></figure></li></ul><p>str.length   // 只支持读 不支持写操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">22.3获取指定位置上的字符串</div></pre></td></tr></table></figure></p><ul><li>str.charAt(1)<br>str.charAt(1) == str[1]<br>//str[1] 这个方法最早的时候 是不支持IE6的 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">22.4获取指定位置上的编码</div></pre></td></tr></table></figure></li></ul><p>str.charCodeAt(0)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">22.5把指定编码转成字符串</div></pre></td></tr></table></figure></p><p>String.fromCharCode(20320)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">22.6查找指定字符串出现的位置</div></pre></td></tr></table></figure></p><p>indexOf()<br>//indexOf(‘s’,1) 第一个参数是要查找的字符串 第二个参数是开始查找的位置<br>//indexOf() 当查找的字符串没有的情况下 会返回一个-1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">22.7获取字符串最后一次出现的位置</div></pre></td></tr></table></figure></p><p>lastIndexOf()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">22.8字符串的截取</div></pre></td></tr></table></figure></p><ol><li>slice(start,end)     *不包含结束位       //slice(-1)从后往前截取</li><li>substring(1,3)      *不包含结束位  常用     //substring(-1) 负数位当做0来处理</li><li>substr(1,3)       **包含结束位置       //substr(-1)从后往前截取<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">22.9字符串中字符的替换</div></pre></td></tr></table></figure></li></ol><p>str.replace()<br>第一个参数是:要查找的内容；第二个参数：要替换的内容<br>alert(str.replace(‘a’,’<em>*</em>‘))<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">22.10大小写转换</div></pre></td></tr></table></figure></p><p>转换小写    toLocaleLowerCase()</p><p>转换大写    toUpperCase()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 二十三、节点操作</div><div class="line">23.1创建节点</div></pre></td></tr></table></figure></p><p>document.createElement(‘标签的名字’)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">23.2添加子节点</div></pre></td></tr></table></figure></p><p>parent.appendChild(‘要添加的节点’)  // 在父节点的后面添加子节点<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">23.3删除节点</div></pre></td></tr></table></figure></p><p>parent.removeChild(‘要删除的节点’)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">23.4找到父节点</div></pre></td></tr></table></figure></p><p>parentNode<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">23.5变量获取范围</div></pre></td></tr></table></figure></p><p>var 函数内部的变量 有var 就是局部变量 没有var 就是全局变量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">23.6查看节点类型</div></pre></td></tr></table></figure></p><pre><code>nodeType 查看节点类型    nodeType--&gt;1         元素节点     nodeType--&gt;2         属性节点             nodeType--&gt;3         文本节点    nodeType--&gt;...        注释节点</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">**23.7节点的4种操作方法**</div></pre></td></tr></table></figure><p>var aFirstEle = oList.firstElementChild || oList.firstChild;<br>var aLastEle = oList.lastElementChild || oList.lastChild;<br>var aNextEle =aFirstEle.nextElementSibling || aFirstEle.nextSibling<br>var oPrevEle = aLastEle.previousElementSibling || aLastEle.previousSibling;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">23.8替换节点</div></pre></td></tr></table></figure></p><p>parent.replaceChild(替换的元素，被替换的元素)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">23.9克隆节点</div></pre></td></tr></table></figure></p><ul><li>obj.cloneNode()<ol><li>obj.cloneNode(true); // 默认的情况不会clone的元素里的内容 一起克隆过 要true才可以</li><li>当克隆的对象有事件的时候 事件是不能被克隆过去的<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 二十四、属性的操作</div><div class="line"></div><div class="line">设置属性</div></pre></td></tr></table></figure></li></ol></li></ul><p>obj.setAttribute(name,val)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">获取属性</div></pre></td></tr></table></figure></p><p>obj.getAttribute(name)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">删除属性</div></pre></td></tr></table></figure></p><p>obj.removeAttribute(name)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure></p><p>alert(oPic.src)-&gt;<a href="http://127.0.0.1:8020/JS%E7%AC%AC%E5%85%AD%E8%AF%BE/1.jpg" target="_blank" rel="external">http://127.0.0.1:8020/JS%E7%AC%AC%E5%85%AD%E8%AF%BE/1.jpg</a>   // 相对路径</p><p>alert(oPic.getAttribute(‘src’)) -&gt;  1.jpg   // 使用obj.setAttribute(index,val)会显示出来<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 二十五、BOM操作</div><div class="line"></div><div class="line">25.1打开新窗口</div></pre></td></tr></table></figure></p><p>window.open(‘href’)<br>            window.open(‘<a href="https://www.baidu.com&#39;,&#39;_self" target="_blank" rel="external">https://www.baidu.com&#39;,&#39;_self</a>‘);<br>            _self 当前窗口打开<br>            _blank 在新窗口打开<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">25.2关闭窗口</div></pre></td></tr></table></figure></p><p>window.close();     // FireFox不兼容，只能关闭js打开的页面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">25.3设置浏览器地址</div></pre></td></tr></table></figure></p><p>window.location=’地址’<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">25.4获取浏览器的详细属性版本名称</div></pre></td></tr></table></figure></p><p>window.navigator.userAgent     // Chrome Firefox<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">25.5在文本框中输入代码，在新打开的窗口中运行</div></pre></td></tr></table></figure></p><p>oBtn.onclick=function(){<br>    var newPage = window.open(‘about:blank’);<br>    newPage.document.write(oTxt.value);<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">25.6系统对话框</div></pre></td></tr></table></figure></p><p>警告框 alert(‘内容’) 没有返回值<br>选择框 confirm(‘提问的内容’) 返回值boolean<br>输入框 prompt（’…’,’b222’）返回字符串或null(按取消)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">25.7获取可视区的尺寸</div></pre></td></tr></table></figure></p><p>oW=document.documentElement.clientWidth;// 不包括滚动条的宽度<br>oH=document.documentElement.clientHeight<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">25.8获取内容高度</div></pre></td></tr></table></figure></p><p>document.body.scrollHeight<br>    //在谷歌下 内容没有超出body的高度 默认下body的高度等于可视区的高度(和版本有关)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">25.9获取滚动条位置</div></pre></td></tr></table></figure></p><p>window.onscroll=function(){<br>oScroTop= document.documentElement.scrollTop || document.body.scrollTop;<br>};<br>oBtn.onclick=function(){<br>    alert(oScroTop);<br>};<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">25.10改变窗口大小事件</div></pre></td></tr></table></figure></p><p>window.onresize();  // 在窗口大小改变时，重新读取窗口尺寸用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">### 二十六、cookie</div><div class="line"></div><div class="line">26.1  JSON对象 -&gt; 字符串</div></pre></td></tr></table></figure></p><p>JSON.stringify()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">26.2  字符串JSON  -&gt; 对象</div></pre></td></tr></table></figure></p><p>JSON.parse()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">26.3 localStorage (只能存字符串)</div></pre></td></tr></table></figure></p><p>var list ={‘name’:’张三’,’age’:20,’pass’:1233};<br>localStorage.setItem(‘data’,JSON.stringify(list));    //将json变为字符串写入<br>alert(JSON.parse(localStorage.getItem(‘data’)).age);    // 转变为json再获取<br>sessionStorage.setItem(‘name’,’你好’)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&gt; setItem--写    getItem---读    removeItem---删除</div><div class="line"></div><div class="line"></div><div class="line">```</div><div class="line">*localStorage和sessionStorage的区别</div><div class="line">    * 当窗口关闭后 sessionStorage 里面的数据也就清除掉了</div><div class="line">    * localStorage在窗口关闭的时候 数据依然是存在的</div><div class="line">*重点记一下</div></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cookie 存储数据</div><div class="line">localStorage 本地存储  html5 </div><div class="line">sessionStorage 本地存储</div><div class="line">flashcookie</div></pre></td></tr></table></figure><p><strong>Cookie</strong> 是</p><ul><li>存储用户信息; </li><li>大小是有限制; </li><li>运行在服务器上;</li><li>以文件的形式保存在客户端上; </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">可修改的、一些重要的数据不要写cookie里; </div><div class="line"></div><div class="line">一个网站的所有页面共用 一个cookie 它不能跨域;</div><div class="line"></div><div class="line">有过期时间  它是document.cookie=&apos;&apos;</div><div class="line"></div><div class="line">cookie的删除  把日期设置成负数 就是删除cookie</div></pre></td></tr></table></figure><h3 id="二十七、ajax"><a href="#二十七、ajax" class="headerlink" title="二十七、ajax"></a>二十七、ajax</h3><blockquote><p>27.1 ajax是前端用来向服务器请求数据的 它的特点是可以局部刷新<br>    ajax要在服务器上运行</p></blockquote><p>27.2 创建ajax对象：详情-&gt; 第9课 -&gt; 2创建有注释版本ajax</p><p>27.3 计算字符串结果  不能转json</p><blockquote><p>eval();</p></blockquote><p><strong>缓存出现的原因 :</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//当第一次访问页面的时候，浏览器在把页面进行缓存 在次访问该地址的时候 就会从缓存的地方去读数据</div><div class="line">//好处是会加速网页打开的速度 坏处是不能及时更新数据  好处大于坏处的</div><div class="line">//缓存不要乱清除  根据团队要求去清除</div></pre></td></tr></table></figure><p>27.4 时间戳</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">oDate.getTime() // 格林尼治时间 -- 现在的时间  单位：毫秒</div></pre></td></tr></table></figure><p>27.5 post 和get的区别</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">get </div><div class="line">  1. 会把数据放在地址栏上 发送</div><div class="line">  2. get的安全性能底 </div><div class="line">  3. get的大小是有限制的 </div><div class="line">post </div><div class="line">  1. 不会把数据放在地址里上 </div><div class="line">  2. 安全性能高 </div><div class="line">  3. post是没有限制的 </div><div class="line"> </div><div class="line">get ----用于获取数据（如：浏览帖子）</div><div class="line">post ---用于上传数据（如：用户注册）</div></pre></td></tr></table></figure><p>27.6异步同步</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">同步  一边打游戏 一边看电视     AJAX 异步 </div><div class="line">异步  打完游戏 看电视          AJAX 同步  不用同步    //队列 进队 出队</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;js简单梳理
    
    </summary>
    
    
      <category term="学习整理" scheme="https://woshihuasheng.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%95%B4%E7%90%86/"/>
    
      <category term="js" scheme="https://woshihuasheng.github.io/tags/js/"/>
    
  </entry>
  
</feed>
